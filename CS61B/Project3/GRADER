For WUGraph.java, I used the List Class from Homework 5, along with the HashTableChained class from Homework 6. I had to make a few changes to both classes. For DListNode, I added a boolean parameter that is true if you want to create an edges DList, and false otherwise. In addition, I created a new variable that stores the partner node for each node. The edges DList is only used when I used DListNodes to store vertices, and the partner variable is only used when I use a DList to store edges. I also added 3 methods. edgeList() simply returns the list of edges. partnerEdge(DListNode edge) edits the partnerEdge variable to store the parameter. partnerEdge() returns the partnerEdge.
To store edges and vertices, I made two hashTables: one for vertices and one for edges. The vertice hashTable stores entries with keys that is the vertex Object and values that store the DListNode that represents vertices (item also stores the vertice object). These DListNodes are also stored in a DList called vertices. Each DListNode also stores a DList containing edge DListNodes (item olds an edge object). These DListNodes are the values for the entries stored in the edge HashTable. The key for those entries are VertexPairs that hold the two vertex objects corresponding to the edge.
removeVertex runs in O(d) time as find for HashTableChained runs in O(1) time (assuming collisions are small). Therefore, I can simply find the Entry, go to the DListNode, and look at the edges corresponding to that node. Looping through the DList of edges to that Node and removing all the edges takes O(d) time, searching for all the partner edges to remove takes O(1) time (as there is a reference to all partner edges in the edge nodes), and removing the vertex itself takes O(1) time.
getVertices runs in O(|V|) time because WUGraph stores a DList of all the vertices. This allows it to simply iterate through the vertices list and places the object into the array. Creating the array takes O(1) time as vertexCount takes O(1) time.
